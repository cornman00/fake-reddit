{"ast":null,"code":"var _jsxFileName = \"/Users/seokhyunkim/Desktop/projects/fake_reddit/client/src/components/navbar/LoginModal.js\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"../../App.scss\";\nimport { Button, Modal, ModalHeader, ModalBody } from \"reactstrap\";\nimport GoogleLogin from \"react-google-login\";\n\nconst LoginModal = ({\n  updateToken\n}) => {\n  const [modal, setModal] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errors, setErrors] = useState({\n    username_error: \"\",\n    password_error: \"\"\n  });\n\n  const toggle = () => setModal(!modal);\n\n  const handleSubmit = e => {\n    const isValid = formValidate();\n    e.preventDefault();\n\n    if (isValid) {\n      axios.post(\"/login\", {\n        username: username,\n        password: password\n      }).then(res => res.data).then(data => {\n        console.log(data);\n        localStorage.setItem(\"userToken\", data.access_token);\n        localStorage.setItem(\"username\", data.username);\n        updateToken();\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n\n  const formValidate = () => {\n    let isValid = true;\n    setErrors({});\n\n    if (!username) {\n      setErrors(prev => ({ ...prev,\n        [\"username_error\"]: \"Empty Username\"\n      }));\n      isValid = false;\n    } else if (username.length <= 4 && username.length >= 21) {\n      setErrors(prev => ({ ...prev,\n        [\"username_error\"]: \"The length of username should be between 5 and 20.\"\n      }));\n      isValid = false;\n    }\n\n    if (!password) {\n      setErrors(prev => ({ ...prev,\n        [\"password_error\"]: \"Empty Password\"\n      }));\n      isValid = false;\n    }\n\n    return isValid;\n  };\n\n  const googleOnSuccess = res => {\n    console.log(res);\n    const userEmail = res.profileObj.email;\n    const parsed_username = userEmail.substring(0, userEmail.indexOf(\"@\"));\n    setUsername(parsed_username);\n    localStorage.setItem(\"userToken\", res.tokenObj.access_token);\n    localStorage.setItem(\"username\", parsed_username);\n    updateToken();\n    alert(\"Logged In Successfully\");\n  };\n\n  const googleOnFailure = res => {\n    console.log(res);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"nav-button login-button\",\n    color: \"link\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, \"LOG IN\"), /*#__PURE__*/React.createElement(Modal, {\n    className: \"auth-modal\",\n    isOpen: modal,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    className: \"modal-header\",\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Log in\"), /*#__PURE__*/React.createElement(ModalBody, {\n    className: \"modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GoogleLogin, {\n    clientId: \"1087910724182-02v9tf6jm6h867i3vd81rui2dm4b6jvb.apps.googleusercontent.com\",\n    render: renderProps => /*#__PURE__*/React.createElement(Button, {\n      onClick: renderProps.onClick,\n      disabled: renderProps.disabled,\n      color: \"link\",\n      className: \"google-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fab fa-google\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }), \"CONTINUE WITH GOOGLE\"),\n    onSuccess: googleOnSuccess,\n    onFailure: googleOnFailure,\n    cookiePolicy: \"single_host_origin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    method: \"POST\",\n    onSubmit: handleSubmit,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-buttons-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"username\",\n    placeholder: \"USERNAME\",\n    onChange: e => setUsername(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"PASSWORD\",\n    onChange: e => setPassword(e.target.value),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    className: \"modal-login-button\",\n    color: \"primary\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"LOG IN\")))));\n};\n\nexport default LoginModal;","map":{"version":3,"sources":["/Users/seokhyunkim/Desktop/projects/fake_reddit/client/src/components/navbar/LoginModal.js"],"names":["React","useState","axios","Button","Modal","ModalHeader","ModalBody","GoogleLogin","LoginModal","updateToken","modal","setModal","username","setUsername","password","setPassword","errors","setErrors","username_error","password_error","toggle","handleSubmit","e","isValid","formValidate","preventDefault","post","then","res","data","console","log","localStorage","setItem","access_token","catch","err","prev","length","googleOnSuccess","userEmail","profileObj","email","parsed_username","substring","indexOf","tokenObj","alert","googleOnFailure","renderProps","onClick","disabled","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"../../App.scss\";\nimport { Button, Modal, ModalHeader, ModalBody } from \"reactstrap\";\nimport GoogleLogin from \"react-google-login\";\n\nconst LoginModal = ({ updateToken }) => {\n  const [modal, setModal] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errors, setErrors] = useState({\n    username_error: \"\",\n    password_error: \"\",\n  });\n\n  const toggle = () => setModal(!modal);\n\n  const handleSubmit = (e) => {\n    const isValid = formValidate();\n    e.preventDefault();\n    if (isValid) {\n      axios\n        .post(\"/login\", {\n          username: username,\n          password: password,\n        })\n        .then((res) => res.data)\n        .then((data) => {\n          console.log(data);\n          localStorage.setItem(\"userToken\", data.access_token);\n          localStorage.setItem(\"username\", data.username);\n          updateToken();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n\n  const formValidate = () => {\n    let isValid = true;\n    setErrors({});\n\n    if (!username) {\n      setErrors((prev) => ({\n        ...prev,\n        [\"username_error\"]: \"Empty Username\",\n      }));\n      isValid = false;\n    } else if (username.length <= 4 && username.length >= 21) {\n      setErrors((prev) => ({\n        ...prev,\n        [\"username_error\"]:\n          \"The length of username should be between 5 and 20.\",\n      }));\n      isValid = false;\n    }\n\n    if (!password) {\n      setErrors((prev) => ({\n        ...prev,\n        [\"password_error\"]: \"Empty Password\",\n      }));\n      isValid = false;\n    }\n\n    return isValid;\n  };\n\n  const googleOnSuccess = (res) => {\n    console.log(res);\n    const userEmail = res.profileObj.email;\n    const parsed_username = userEmail.substring(0, userEmail.indexOf(\"@\"));\n    setUsername(parsed_username);\n    localStorage.setItem(\"userToken\", res.tokenObj.access_token);\n    localStorage.setItem(\"username\", parsed_username);\n    updateToken();\n    alert(\"Logged In Successfully\");\n  };\n\n  const googleOnFailure = (res) => {\n    console.log(res);\n  };\n\n  return (\n    <div>\n      <Button className=\"nav-button login-button\" color=\"link\" onClick={toggle}>\n        LOG IN\n      </Button>\n\n      <Modal className=\"auth-modal\" isOpen={modal} toggle={toggle}>\n        <ModalHeader className=\"modal-header\" toggle={toggle}>\n          Log in\n        </ModalHeader>\n        <ModalBody className=\"modal-body\">\n          <GoogleLogin\n            clientId=\"1087910724182-02v9tf6jm6h867i3vd81rui2dm4b6jvb.apps.googleusercontent.com\"\n            render={(renderProps) => (\n              <Button\n                onClick={renderProps.onClick}\n                disabled={renderProps.disabled}\n                color=\"link\"\n                className=\"google-button\"\n              >\n                <i class=\"fab fa-google\"></i>\n                CONTINUE WITH GOOGLE\n              </Button>\n            )}\n            onSuccess={googleOnSuccess}\n            onFailure={googleOnFailure}\n            cookiePolicy={\"single_host_origin\"}\n          />\n          <form method=\"POST\" onSubmit={handleSubmit} noValidate>\n            <div className=\"input-buttons-wrapper\">\n              <input\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"USERNAME\"\n                onChange={(e) => setUsername(e.target.value)}\n                required\n              />\n              <input\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"PASSWORD\"\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"modal-login-button\"\n              color=\"primary\"\n              onClick={toggle}\n            >\n              LOG IN\n            </Button>\n          </form>\n        </ModalBody>\n      </Modal>\n    </div>\n  );\n};\n\nexport default LoginModal;\n"]},"metadata":{},"sourceType":"module"}